;-------------------------------------------------------------------------------
; MSP430 Assembler Code Template for use with TI Code Composer Studio
;
; Codemise Project - INEL4206 Microprocessors
; Prof. Jose Navarro Figueroa
;
; Developed by:
; 	Christian J. Collado Rivera
; 	Carlos A. Cabrera Bermudez
; 	Francisco A. Casiano Rosado
; 	Victor M. Batista Figueroa
;-------------------------------------------------------------------------------
            .cdecls C,LIST,"msp430.h"       ; Include device header file
            
;-------------------------------------------------------------------------------
            .def    RESET                   ; Export program entry-point to
                                            ; make it known to linker.
;-------------------------------------------------------------------------------
            .text                           ; Assemble into program memory.
            .retain                         ; Override ELF conditional linking
                                            ; and retain current section.
            .retainrefs                     ; And retain any sections that have
                                            ; references to current section.

;-------------------------------------------------------------------------------
 												                                ;   LETTERS		   HB         LB
ACEFHSLOhi	.word	0xEF,0x9C,0x9F,0x8F,0x6F,0xB7,0x1C,0xFC 					;A				11101111b, 00000000b
											                                    ;C				10011100b, 00000000b
											                                    ;E				10011111b, 00000000b
											                                    ;F				10001111b, 00000000b
											                                    ;H				01101111b, 00000000b
											                                    ;S				10110111b, 00000000b
											                                    ;L				00011100b, 00000000b
											                                    ;O				11111100b, 00000000b
;					 HB		   LB
IT			.word	0x90,0x80,0x50			                                    ;I				10010000b, 01010000b
			.align							                                    ;T				10000000b, 01010000b

MNRVhi		.word	0x6C,0x6C,0xCF,0x0C			                                ;M				01101100b, 10100000b
MNRVlo		.word	0xA0,0x82,0x02,0x28		                                    ;N				01101100b, 10000010b
											                                    ;R				11001111b, 00000010b
											                                    ;V				00001100b, 00101000b
;					 HB	  LB
ZERO		.word	0xFC,0x28													;	NUMBERS		   HB         LB
ONE			.word	0x60,0x20													;0				11111100b, 00101000b
																				;1				01100000b, 00100000b
TwoToNine	.word	0xDB,0xF3,0x67,0xBF,0xE0,0xFF,0xF7							;2				11011011b, 00000000b
			.align																;3				11110011b, 00000000b
																				;4				01100111b, 00000000b
																				;5				Use the S pattern
																				;6				10111111b, 00000000b
																				;7				11100000b, 00000000b
																				;8				11111111b, 00000000b
																				;9				11110111b, 00000000b

; Segmented Display Locations (from left to right)
seg1        .equ    9
seg2        .equ    5
seg3        .equ    3
seg4        .equ    18
seg5        .equ    14
seg6        .equ    7

RESET       mov.w   #__STACK_END,SP         ; Initialize stackpointer
StopWDT     mov.w   #WDTPW|WDTHOLD,&WDTCTL  ; Stop watchdog timer

;-------------------------------------------------------------------------------
; Main loop here
; 
; Registers used:
; 	R4 = loop counter / decreasing index
; 	R5 = temporary value of the location of an lcd letter/digit in an array
; 	R6 = temporary value to show the letter/digit in the LCD
; 	R7 = holds the address of the desired segmented display
; 	R8
; 	R9
; 	R10
; 	R11
; 	R12
; 	R13
; 	R14 = used to temporarily place the PC+2 value created when using the CALL command
; 
; Stack order:
; 	For writing to the LCD:
; 		1st - Address of the segmented display
; 		2nd - High byte of the letter
;-------------------------------------------------------------------------------

UnlockGPIO:
			bic.w 	#LOCKLPM5, &PM5CTL0

Init:
			mov.w 	#0xFFFF, &LCDCPCTL0    	;
			mov.w 	#0xFC3F, &LCDCPCTL1    	; Initialize LCD Segments
			mov.w 	#0x0FFF, &LCDCPCTL2    	;

			mov.w 	#0x041e, &LCDCCTL0		;Initialize LCD_C

			mov.w   #0x0208, &LCDCVCTL		;ACLK, Divider = 1, Pre-divider = 16; 4-pin MUX
											;VLCD generated internally,
  		    								;V2-V4 generated internally, v5 to ground
  		    								;Set VLCD voltage to 2.60v
  		    								;Enable charge pump and select internal reference for it

			mov.w   #0x8000, &LCDCCPCTL   	;Clock synchronization enabled

			mov.w   #2, &LCDCMEMCTL       	;Clear LCD memory

			bis.w   #1, &LCDCCTL0			;Turn LCD on

			push 	R4						;
			push 	R5						;
			push 	R6						;
			push 	R7						;
			push 	R14						; Save the values in the registers and clear them for use
			clr		R4						;
			clr		R5						;
			clr		R6						;
			clr		R7						;
			clr		R14						;
			

MainLoop:
			mov 	#24, R4					; 4*6 = 24 (6 digits/letters & 3 stack push's per digit/letter)				--------> CHANGE TO 24 <---------
			

			push	#seg1					; Push LCD display addresses to stack
			mov		#3, R5					; Push high
			push	IT(R5)					; &
			push	#1+seg1					; low bytes of a letter/digit to the stack
			mov 	#5, R5					;
			push	IT(R5)					;
			
			push	#seg2					;
			push	#0						;
			push	#1+seg2					; Print E
			mov 	#5, R5					;
			push	ACEFHSLOhi(R5)			;
			
			push	#seg3					; 
			push	#0						;
			push	#1+seg3					; Print A
			mov 	#1, R5					;
			push	ACEFHSLOhi(R5)			;
			
			push	#seg4					; 
			mov 	#5, R5					;
			push	IT(R5)					;
			push	#1+seg4					; Print M
			mov 	#5, R5					;
			push	IT(R5)					;
			
			push	#seg5					;
			mov 	#5, R5					;
			push	IT(R5)					;
			push	#1+seg5					; Print 0
			mov 	#5, R5					;
			push	IT(R5)					;
			
			push	#seg6					;
			mov 	#5, R5					;
			push	IT(R5)					;
			push	#1+seg6					; Print 2
			mov 	#5, R5					;
			push	IT(R5)					;
			
			call	#writeToLCD

			JMP		$
			nop

writeToLCD:
			pop		R14						; Place PC+2 value into a Register temporarily

			pop		R6						;
			pop		R7						; Printing the low byte to LCD
			mov.b 	R6, 0x0a20(R7)			;

			pop		R6						; 
			pop		R7						; Printing the high byte to LCD
			mov.b 	R6, 0x0a20(R7)			;

			push 	R14						; Return PC+2 value to the stack
			decd	R4
			decd	R4

			cmp		#0,R4
			jne		writeToLCD				; Keep looping until all letters have been printed

			ret


;-------------------------------------------------------------------------------
; Stack Pointer definition
;-------------------------------------------------------------------------------
            .global __STACK_END
            .sect   .stack
            
;-------------------------------------------------------------------------------
; Interrupt Vectors
;-------------------------------------------------------------------------------
            .sect   ".reset"                ; MSP430 RESET Vector
            .short  RESET
            
