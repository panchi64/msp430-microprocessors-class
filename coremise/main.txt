;-------------------------------------------------------------------------------
; MSP430 Assembler Code Template for use with TI Code Composer Studio
;
; Codemise Project - INEL4206 Microprocessors
; Prof. Jose Navarro Figueroa
;
; TEAM02:
; 	Victor M. Batista Figueroa
;		-> 11% de contribucion
; 
; 	Carlos A. Cabrera Bermudez
;		-> 12% de contribucion
;
; 	Francisco A. Casiano Rosado
;		-> 65% de contribucion
;
; 	Christian J. Collado Rivera
;		-> 12% de contribucion
;-------------------------------------------------------------------------------
            .cdecls C,LIST,"msp430.h"       ; Include device header file

;-------------------------------------------------------------------------------
            .def    RESET                   ; Export program entry-point to
                                            ; make it known to linker.
;-------------------------------------------------------------------------------
            .text                           ; Assemble into program memory.
            .retain                         ; Override ELF conditional linking
                                            ; and retain current section.
            .retainrefs                     ; And retain any sections that have
                                            ; references to current section.

;-------------------------------------------------------------------------------

; Segmented Display Locations (from left to right)
seg1        .equ    9
seg2        .equ    5
seg3        .equ    3
seg4        .equ    18
seg5        .equ    14
seg6        .equ    7
;   				 |-----------------HB----------------|	 LB						LETTERS		   HB         LB
ACEFHSLOhi	.word	0xEF,0x9C,0x9F,0x8F,0x6F,0xB7,0x1C,0xFC,0x00				;A				11101111b, 00000000b
			.align							                                    ;C				10011100b, 00000000b
											                                    ;E				10011111b, 00000000b
											                                    ;F				10001111b, 00000000b
											                                    ;H				01101111b, 00000000b
											                                    ;S				10110111b, 00000000b
											                                    ;L				00011100b, 00000000b
											                                    ;O				11111100b, 00000000b
;					 HB	  HB   LB
IT			.word	0x90,0x80,0x50			                                    ;I				10010000b, 01010000b
			.align							                                    ;T				10000000b, 01010000b

MNRVhi		.word	0x6C,0x6C,0xCF,0x0C			                                ;M				01101100b, 10100000b
MNRVlo		.word	0xA0,0x82,0x02,0x28		                                    ;N				01101100b, 10000010b
											                                    ;R				11001111b, 00000010b
											                                    ;V				00001100b, 00101000b
;					 HB	  LB
ZERO		.word	0xFC,0x28													;	NUMBERS		   HB         LB
ONE			.word	0x60,0x20													;0				11111100b, 00101000b
;					 |--------------HB--------------|	LB						 1				01100000b, 00100000b
TwoToNine	.word	0xDB,0xF3,0x67,0xBF,0xE0,0xFF,0xF7,0x00						;2				11011011b, 00000000b
			.align																;3				11110011b, 00000000b
																				;4				01100111b, 00000000b
																				;5				Use the S pattern
																				;6				10111111b, 00000000b
																				;7				11100000b, 00000000b
																				;8				11111111b, 00000000b
																				;9				11110111b, 00000000b

timerNums	.byte	0xFC,0x60,0xDB,0xF1,0x67,0xB7,0xBF,0xE0,0xFF,0xF7


RESET       mov.w   #__STACK_END,SP         ; Initialize stackpointer
StopWDT     mov.w   #WDTPW|WDTHOLD,&WDTCTL  ; Stop watchdog timer

;-------------------------------------------------------------------------------
; Main loop here
;
; Registers used:
; 	R4 = loop counter / decreasing index
; 	R5 = temporary value of the location of an lcd letter/digit in an array
; 	R6 = temporary value to show the letter/digit in the LCD
; 	R7 = holds the address of the desired segmented display
; 	R8 = left button press counter
; 	R9 = right button press counter
; 	R10 = entry point flag (1 if names, 2 if timer)
; 	R11 = delay "timer"
; 	R12 = disable s2 toggle
; 	R13 = 
; 	R14 = used to temporarily place the PC+2 value created when using the CALL command
;
;-------------------------------------------------------------------------------

UnlockGPIO:
			bic.w 	#LOCKLPM5, &PM5CTL0

Setup:
			mov.w 	#0xFFFF, &LCDCPCTL0    	;
			mov.w 	#0xFC3F, &LCDCPCTL1    	; Initialize LCD Segments
			mov.w 	#0x0FFF, &LCDCPCTL2    	;

			mov.w 	#0x041e, &LCDCCTL0		; Initialize LCD_C

			mov.w   #0x0208, &LCDCVCTL		; ACLK, Divider = 1, Pre-divider = 16; 4-pin MUX
											; VLCD generated internally,
  		    								; V2-V4 generated internally, v5 to ground
  		    								; Set VLCD voltage to 2.60v
  		    								; Enable charge pump and select internal reference for it

			mov.w   #0x8000, &LCDCCPCTL   	; Clock synchronization enabled

			mov.w   #2, &LCDCMEMCTL       	; Clear LCD memory

			bis.w   #1, &LCDCCTL0			; Turn LCD on

			bic.b	#0xFF, &P1SEL0
			bic.b	#0xFF, &P1SEL1
			
			mov.b	#0xF9, &P1DIR			; Set all pins on port 1 for output except the two buttons

            bis.b   #0x06, &P1REN           ; P1.1 & P1.2 Resistor enabled as pullup
			bis.b   #0x06, &P1OUT
                                            ; resistor
            bic.b   #0x06, &P1IFG           ; Reset interrupt flag to avoid issues when turning on and off
            bis.b   #0x02, &P1IE            ; Enable interrupt at S1
            bis.b   #0x04, &P1IE            ; Enable interrupt at S2
            bis.b	#0x02, &P1IES
            bis.b	#0x04, &P1IES

			mov     #CCIE, &TA0CCTL0        ; Enable TACCR0 interrupt

			bic.b 	#CCIE, &TA0CCTL0		; Disable the TACCRO Interrupt
        	mov     #TASSEL_2+MC_1+ID_3, &TA0CTL  								;Set timer according to next table

			mov		#31250, TA0CCR0			; Set clock cycles (0.25s)

        	; Uses SMCLK and up mode
        	; TASSELx        MCx (mode control)                IDx (input divider)
        	; 00 -> TACLK    00 -> Stop                        00 -> /1
        	; 01 -> ACLK     01 -> Up mode (up to TACCR0)      01 -> /2
        	; 10 -> SMCLK    10 -> Continuous (up to 0FFFFh)   02 -> /4
        	; 11 -> INCLK    11 -> Up/down (top on TACCR0)     03 -> /8
        	; period = cycles * divider / SMLCK
        	; Assuming SMLCK = 1 MHz, divider = 8 and period = 0.25 seg
        	; cycles = 31250.  With period = 0.25 LED turn on every 1 second

			nop
            bis.w	#GIE, SR				; Global interrupt enable
            nop

writeTEAM:
			clr		R8						; Make sure the button counters are reset
			clr 	R9						;
			clr		R12

			push	#seg1					; Push LCD display address to stack
			mov		#3, R5					; Push high
			push	IT(R5)					; &
			push	#1+seg1					; low bytes of a letter/digit to the stack
			mov 	#5, R5					; Prints T on the LCD
			push	IT(R5)					;

			call	#writeToLCD

			push	#seg2					; Push LCD display address to stack
			mov		#5, R5					; Push high
			push	ACEFHSLOhi(R5)			; &
			push	#1+seg2					; low bytes of a letter/digit to the stack
			mov 	#17, R5					; Prints E on the LCD
			push	ACEFHSLOhi(R5)			;

			call	#writeToLCD

			push	#seg3					; Push LCD display address to stack
			mov		#1, R5					; Push high
			push	ACEFHSLOhi(R5)			; &
			push	#1+seg3					; low bytes of a letter/digit to the stack
			mov 	#17, R5					; Prints A on the LCD
			push	ACEFHSLOhi(R5)			;

			call	#writeToLCD

			push	#seg4					; Push LCD display address to stack
			mov		#1, R5					; Push high
			push	MNRVhi(R5)				; &
			push	#1+seg4					; low bytes of a letter/digit to the stack
			mov 	#1, R5					; Prints M on the LCD
			push	MNRVlo(R5)				;

			call	#writeToLCD

			push	#seg5					; Push LCD display address to stack
			mov		#1, R5					; Push high
			push	ZERO(R5)				; &
			push	#1+seg5					; low bytes of a letter/digit to the stack
			mov 	#3, R5					; Prints M on the LCD
			push	ZERO(R5)				;

			call	#writeToLCD

			push	#seg6					; Push LCD display address to stack
			mov		#1, R5					; Push high
			push	TwoToNine(R5)			; &
			push	#1+seg6					; low bytes of a letter/digit to the stack
			mov 	#15, R5					; Prints 2 on the LCD
			push	TwoToNine(R5)			;

			call	#writeToLCD

wait:
			cmp		#1, R10
			jz 		showName

			cmp		#2, R10
			jz		showTimer

			jmp		wait

showTimer:
			inc.b	R9
			clr		R10
			clr		R12

			call 	#clearLCD

			push	#seg3					; Push LCD display address to stack
			mov		#1, R5					; Push high
			push	ZERO(R5)				; &
			push	#1+seg3					; low bytes of a letter/digit to the stack
			mov 	#3, R5					; Prints 0 on the LCD
			push	ZERO(R5)				;

			call	#writeToLCD

			push	#seg4					; Push LCD display address to stack
			mov		#1, R5					; Push high
			push	ZERO(R5)				; &
			push	#1+seg4					; low bytes of a letter/digit to the stack
			mov 	#3, R5					; Prints 0 on the LCD
			push	ZERO(R5)				;

			call	#writeToLCD
			
			bis.b	#BIT2, &0x0A33			; Turn on the colon in the display

			push	#seg5					; Push LCD display address to stack
			mov		#1, R5					; Push high
			push	ZERO(R5)				; &
			push	#1+seg5					; low bytes of a letter/digit to the stack
			mov 	#3, R5					; Prints 0 on the LCD
			push	ZERO(R5)				;

			call	#writeToLCD

			push	#seg6					; Push LCD display address to stack
			mov		#1, R5					; Push high
			push	ZERO(R5)				; &
			push	#1+seg6					; low bytes of a letter/digit to the stack
			mov 	#3, R5					; Prints 0 on the LCD
			push	ZERO(R5)				;

			call	#writeToLCD

			jmp 	wait

showName:
			inc.b 	R8
			clr		R10

			cmp		#1, R8
			jz		firstName
			cmp		#2, R8
			jz		secondName
			cmp		#3, R8
			jz		thirdName
			cmp		#4, R8
			jz		fourthName

			cmp		#5, R8					; If we've iterated through all members of the team then
			jz		writeTEAM				; return to writeTEAM label and reset button counts

			ret

firstName:
			push	#seg1					; Push LCD display address to stack
			mov		#7, R5					; Push high
			push	MNRVhi(R5)				; &
			push	#1+seg1					; low bytes of a letter/digit to the stack
			mov 	#7, R5					; Prints V on the LCD
			push	MNRVlo(R5)				;

			call	#writeToLCD

			push	#seg2					; Push LCD display address to stack
			mov		#1, R5					; Push high
			push	IT(R5)					; &
			push	#1+seg2					; low bytes of a letter/digit to the stack
			mov 	#5, R5					; Prints I on the LCD
			push	IT(R5)					;

			call	#writeToLCD

			push	#seg3					; Push LCD display address to stack
			mov		#3, R5					; Push high
			push	ACEFHSLOhi(R5)			; &
			push	#1+seg3					; low bytes of a letter/digit to the stack
			mov 	#17, R5					; Prints C on the LCD
			push	ACEFHSLOhi(R5)			;

			call	#writeToLCD

			push	#seg4					; Push LCD display address to stack
			mov		#3, R5					; Push high
			push	IT(R5)					; &
			push	#1+seg4					; low bytes of a letter/digit to the stack
			mov 	#5, R5					; Prints T on the LCD
			push	IT(R5)					;

			call	#writeToLCD

			push	#seg5					; Push LCD display address to stack
			mov		#15, R5					; Push high
			push	ACEFHSLOhi(R5)			; &
			push	#1+seg5					; low bytes of a letter/digit to the stack
			mov 	#17, R5					; Prints O on the LCD
			push	ACEFHSLOhi(R5)			;

			call	#writeToLCD

			push	#seg6					; Push LCD display address to stack
			mov		#5, R5					; Push high
			push	MNRVhi(R5)				; &
			push	#1+seg6					; low bytes of a letter/digit to the stack
			mov 	#5, R5					; Prints R on the LCD
			push	MNRVlo(R5)				;

			call	#writeToLCD

			jmp		wait


secondName:
			push	#seg1					; Push LCD display address to stack
			mov		#3, R5					; Push high
			push	ACEFHSLOhi(R5)			; &
			push	#1+seg1					; low bytes of a letter/digit to the stack
			mov 	#17, R5					; Prints C on the LCD
			push	ACEFHSLOhi(R5)			;

			call	#writeToLCD

			push	#seg2					; Push LCD display address to stack
			mov		#1, R5					; Push high
			push	ACEFHSLOhi(R5)			; &
			push	#1+seg2					; low bytes of a letter/digit to the stack
			mov 	#17, R5					; Prints A on the LCD
			push	ACEFHSLOhi(R5)			;

			call	#writeToLCD

			push	#seg3					; Push LCD display address to stack
			mov		#5, R5					; Push high
			push	MNRVhi(R5)				; &
			push	#1+seg3					; low bytes of a letter/digit to the stack
			mov 	#5, R5					; Prints R on the LCD
			push	MNRVlo(R5)				;

			call	#writeToLCD

			push	#seg4					; Push LCD display address to stack
			mov		#13, R5					; Push high
			push	ACEFHSLOhi(R5)			; &
			push	#1+seg4					; low bytes of a letter/digit to the stack
			mov 	#17, R5					; Prints L on the LCD
			push	ACEFHSLOhi(R5)			;

			call	#writeToLCD

			push	#seg5					; Push LCD display address to stack
			mov		#15, R5					; Push high
			push	ACEFHSLOhi(R5)			; &
			push	#1+seg5					; low bytes of a letter/digit to the stack
			mov 	#17, R5					; Prints O on the LCD
			push	ACEFHSLOhi(R5)			;

			call	#writeToLCD

			push	#seg6					; Push LCD display address to stack
			mov		#11, R5					; Push high
			push	ACEFHSLOhi(R5)			; &
			push	#1+seg6					; low bytes of a letter/digit to the stack
			mov 	#17, R5					; Prints S on the LCD
			push	ACEFHSLOhi(R5)			;

			call	#writeToLCD

			jmp		wait

thirdName:
			push	#seg1					; Push LCD display address to stack
			mov		#7, R5					; Push high
			push	ACEFHSLOhi(R5)			; &
			push	#1+seg1					; low bytes of a letter/digit to the stack
			mov 	#17, R5					; Prints F on the LCD
			push	ACEFHSLOhi(R5)			;

			call	#writeToLCD

			push	#seg2					; Push LCD display address to stack
			mov		#5, R5					; Push high
			push	MNRVhi(R5)				; &
			push	#1+seg2					; low bytes of a letter/digit to the stack
			mov 	#5, R5					; Prints R on the LCD
			push	MNRVlo(R5)				;

			call	#writeToLCD

			push	#seg3					; Push LCD display address to stack
			mov		#1, R5					; Push high
			push	ACEFHSLOhi(R5)			; &
			push	#1+seg3					; low bytes of a letter/digit to the stack
			mov 	#17, R5					; Prints A on the LCD
			push	ACEFHSLOhi(R5)			;

			call	#writeToLCD

			push	#seg4					; Push LCD display address to stack
			mov		#3, R5					; Push high
			push	MNRVhi(R5)				; &
			push	#1+seg4					; low bytes of a letter/digit to the stack
			mov 	#3, R5					; Prints N on the LCD
			push	MNRVlo(R5)				;

			call	#writeToLCD

			push	#seg5					; Push LCD display address to stack
			mov		#3, R5					; Push high
			push	ACEFHSLOhi(R5)			; &
			push	#1+seg5					; low bytes of a letter/digit to the stack
			mov 	#17, R5					; Prints C on the LCD
			push	ACEFHSLOhi(R5)			;

			call	#writeToLCD

			push	#seg6					; Push LCD display address to stack
			mov		#1, R5					; Push high
			push	IT(R5)					; &
			push	#1+seg6					; low bytes of a letter/digit to the stack
			mov 	#5, R5					; Prints I on the LCD
			push	IT(R5)					;

			call	#writeToLCD

			jmp		wait

fourthName:
			push	#seg1					; Push LCD display address to stack
			mov		#3, R5					; Push high
			push	ACEFHSLOhi(R5)			; &
			push	#1+seg1					; low bytes of a letter/digit to the stack
			mov 	#17, R5					; Prints C on the LCD
			push	ACEFHSLOhi(R5)			;

			call	#writeToLCD

			push	#seg2					; Push LCD display address to stack
			mov		#9, R5					; Push high
			push	ACEFHSLOhi(R5)			; &
			push	#1+seg2					; low bytes of a letter/digit to the stack
			mov 	#17, R5					; Prints H on the LCD
			push	ACEFHSLOhi(R5)			;

			call	#writeToLCD

			push	#seg3					; Push LCD display address to stack
			mov		#5, R5					; Push high
			push	MNRVhi(R5)				; &
			push	#1+seg3					; low bytes of a letter/digit to the stack
			mov 	#5, R5					; Prints R on the LCD
			push	MNRVlo(R5)				;

			call	#writeToLCD

			push	#seg4					; Push LCD display address to stack
			mov		#1, R5					; Push high
			push	IT(R5)					; &
			push	#1+seg4					; low bytes of a letter/digit to the stack
			mov 	#5, R5					; Prints I on the LCD
			push	IT(R5)					;

			call	#writeToLCD

			push	#seg5					; Push LCD display address to stack
			mov		#11, R5					; Push high
			push	ACEFHSLOhi(R5)			; &
			push	#1+seg5					; low bytes of a letter/digit to the stack
			mov 	#17, R5					; Prints S on the LCD
			push	ACEFHSLOhi(R5)			;

			call	#writeToLCD

			push	#seg6					; Push LCD display address to stack
			mov		#3, R5					; Push high
			push	IT(R5)					; &
			push	#1+seg6					; low bytes of a letter/digit to the stack
			mov 	#5, R5					; Prints T on the LCD
			push	IT(R5)					;

			call	#writeToLCD

			jmp		wait


writeToLCD:
			pop		R14						; Place PC+2 value into a Register temporarily

			pop		R6						;
			pop		R7						; Printing the low byte to LCD
			mov.b 	R6, 0x0a20(R7)			;

			pop		R6						;
			pop		R7						; Printing the high byte to LCD
			mov.b 	R6, 0x0a20(R7)			;

			push 	R14						; Return PC+2 value to the stack

			ret

clearLCD:
			mov.w	#2, &LCDCMEMCTL
			ret


setNameFlag:
			call	#delay					; For debouncing purposes
			mov.b	#1, R10
			mov.b 	#1, R12
			jmp		finalizeIntrp

setTimerFlag:
			call	#delay					; For debouncing purposes
			mov.b 	#2, R10
			mov.b	#0,	R12
			jmp		finalizeIntrp

delay:
			mov		#65000, R11
timetrav	dec		R11
			jnz		timetrav
			ret

			.sect	".text:_isr:PORT1_ISR"
			.align	2
			.global	PORT1_ISR

PORT1_ISR:
			bit.b	#00000010b, &P1IFG		; Check for S1/P1.1 button pressing
			jnz		setNameFlag

			call	#delay
			cmp		#1, R12
			jz		finalizeIntrp

			bit.b	#00000100b, &P1IFG		; Check for S3/P1.2 button pressing
			jnz		setTimerFlag

			reti

finalizeIntrp:
			bic 	#00000010b, &P1IFG		;Borrar flag de P1.1
			bic 	#00000100b, &P1IFG		;Borrar flag de P1.2

			reti

falseAlarm:
			reti

;-------------------------------------------------------------------------------
; Stack Pointer definition
;-------------------------------------------------------------------------------
            .global __STACK_END
            .sect   .stack

;-------------------------------------------------------------------------------
; Interrupt Vectors
;-------------------------------------------------------------------------------
            .sect	".int37"
            .short	PORT1_ISR

			;.sect   ".int44"
            ;.short  TIMER_A0_ISR

            .sect   ".reset"                ; MSP430 RESET Vector
            .short  RESET
			.end
